# -*- coding: utf-8 -*-
"""ShoppingTrends.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z4ZE8Ty032I4XjuZcHmaLmjfuu3uL6N9
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

file_path='/content/drive/My Drive/Machine_Learning/Shopping trends/shopping_trends.csv'
df=pd.read_csv(file_path)
data=pd.DataFrame(df)
data

data.head()

data.tail()

data.shape

data.info()

# data.isnull()
data.isnull().sum()

data.describe()

data.head(4)

import datetime

date_time=datetime.datetime.now()
# date_time
date_time.year

data.drop(['Color' ,'Shipping Type','Subscription Status','Promo Code Used' ,'Item Purchased', 'Discount Applied' ,'Location','Preferred Payment Method'] , axis=1 , inplace=True)

data.head(4)

data['Payment Method'].unique()

data['Payment Method']=data['Payment Method'].map({'Cash':0,'Credit Card':1,'PayPal':2,'Bank Transfer':3,'Venmo':4 ,'Debit Card':5})

data['Gender'].unique()

data['Gender']=data['Gender'].map({'Male':0,'Female':1})

data.head(1)

data['Frequency of Purchases'].unique()

data['Frequency of Purchases']=data['Frequency of Purchases'].map({'Fortnightly':0 , 'Weekly':1 ,'Annually':2 ,'Quarterly':3 , 'Bi-Weekly':4,'Monthly':5 , 'Every 3 Months':6})

data['Size'].unique()

data['Size']=data['Size'].map({'L':0,'S':1,'M':2,'XL':3})

data.head(1)

data['Category'].unique()

data['Category']=data['Category'].map({'Clothing':0 , 'Footwear':1 , 'Outerwear':2 , 'Accessories':3})

data.head(1)

data['Season'].unique()

data['Season']=data['Season'].map({'Winter':0 , 'Spring':1 , 'Summer':2 ,'Fall':3})

data.head(1)

"""# OUTLIER REMOVAL"""

import seaborn as sns

sns.boxplot(data['Purchase Amount (USD)'] , orient='h')

sorted(data['Purchase Amount (USD)'],reverse=True)

data.shape

data.head(2)

"""# STORE FEATURE IN MATRIX X AND RESPONSE(TARGET)IN VECTOR Y"""

import pandas as pd

X = data.drop(['Previous Purchases', 'Purchase Amount (USD)'],axis=1)
Y = data['Purchase Amount (USD)']

Y

data.head(1)

"""# Splitting the dataset into the training set and testing set"""

import pandas as pd
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train,Y_test=train_test_split(X,Y,test_size=0.20,random_state=42)

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from xgboost import XGBRegressor

"""# MODEL **TRAINING**"""

lr=LinearRegression()
lr.fit(X_train,Y_train)

rf = RandomForestRegressor()
rf.fit(X_train,Y_train)

xg = XGBRegressor()
xg_final = xg.fit(X,Y)

rf = RandomForestRegressor()
rf_final = rf.fit(X,Y)

y_pred=rf.predict(X_test)

from sklearn import metrics
import numpy as np

score=metrics.r2_score(Y_test,y_pred)
score

import  joblib

joblib.dump(xg_final,'Shopping_Trends')

model = joblib.load('Shopping_Trends')

"""# PREDICTION ON DATA"""

data.head(1)

import pandas as pd

data_new = pd.DataFrame({
    'Customer ID': [1],
    'Age': [55],
    'Gender': [0],
    'Category': [0],
    'Size': [0],
    'Season': [0],
    'Review Rating': [3.1],
    'Payment Method': [1],
    'Frequency of Purchases': [0.0]
}, index=[0])

data_new = data_new[['Customer ID', 'Age', 'Gender', 'Category', 'Size', 'Season', 'Review Rating', 'Payment Method', 'Frequency of Purchases']]

model.predict(data_new)

"""# **GUI**"""

from tkinter import *

# !pip install ipywidgets
import ipywidgets as widgets
from IPython.display import display
import joblib
import pandas as pd

# Create input widgets
customer_id = widgets.FloatText(description="Customer ID:")
age = widgets.FloatText(description="Age:")
gender = widgets.FloatText(description="Gender:")
category = widgets.FloatText(description="Category:")
size = widgets.FloatText(description="Size:")
season = widgets.FloatText(description="Season:")
review_rating = widgets.FloatText(description="Review Rating:")
payment_method = widgets.FloatText(description="Payment Method:")
frequency_purchases = widgets.FloatText(description="Frequency of Purchases:")

# Create a button to trigger prediction
predict_button = widgets.Button(description="Predict")

# Create an output widget to display the result
output = widgets.Output()

# Define the prediction function
def on_button_clicked(b):
    with output:
        # Get values from input widgets
        p1 = customer_id.value
        p2 = age.value
        p3 = gender.value
        p4 = category.value
        p5 = size.value
        p6 = season.value
        p7 = review_rating.value
        p8 = payment_method.value
        p9 = frequency_purchases.value

        # Load the model
        model = joblib.load('Shopping_Trends')

        # Create a DataFrame for prediction
        data_new = pd.DataFrame({
            'Customer ID': [p1],
            'Age': [p2],
            'Gender': [p3],
            'Category': [p4],
            'Size': [p5],
            'Season': [p6],
            'Review Rating': [p7],
            'Payment Method': [p8],
            'Frequency of Purchases': [p9]
        }, index=[0])

        # Make the prediction
        result = model.predict(data_new)

        # Display the result
        print("Shopping_Trends", result[0])

# Link the button click to the prediction function
predict_button.on_click(on_button_clicked)

# Display the widgets
display(customer_id, age, gender, category, size, season, review_rating, payment_method, frequency_purchases, predict_button, output)

"""SAVE YOUR  MODEL IN JSON FORMAT"""

xg_final.save_model('xgb_model.json')